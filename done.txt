KMP:
-naive implementation
-regular implementation+nextTable

-testing: single run with timing, multiple runs and comparing results, generating random valid input

-problems: naive implementation and string "aaaa", with pattern "aa" 
    kmp matches, where the algo continues

AhoC:


-problems: string.ascii_uppercase + string.digits as possible chars
    how many states, for now using upper limit and some are empty -> trie
    implementation of goTo function, whole alphabet vs hashing/dict
    checking on input-> multiple times the same word

RabinKarp:
    -only working on 1 and 0
    -> diffrent version from http://www-igm.univ-mlv.fr/~lecroq/string/node5.html#SECTION0050
    -for speed try byteshift vs 2*


more testing
boyer-moore

kmp standard
rk test without many occurencsy faster

alternativ: union-find implemntation refresh 




TESTS:
-ahoc: printable instead of uppercase+didigts


BM:
-diffrent versions: badChar as single array or 2d array
-https://www.inf.hs-flensburg.de/lang/algorithmen/pattern/bm.htm
vs http://www-igm.univ-mlv.fr/~lecroq/string/node14.html#SECTION00140

boyer moore,turbo boyer more,apostolico.giancarlo -> diffrent variants, compare against
https://www.amazon.de/Handbook-Exact-String-Matching-Algorithms/dp/0954300645
https://www.amazon.de/Algorithms-Strings-Maxime-Crochemore/dp/1107670993/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=&sr=

-> focus on booyer more handbook of exact STring Matching
small presentaioon, compare the implemntation, speed on diffrent data

Data: len(text), len(pattern), size(alphabet), preprocssing->remove by only on dataset at times

runs at x-asis, time at y-axis -> diffrent lines

LONG TERM GOAL:
pattern matching with variabls:
regular patterns

oder



REPORT:
ENGLISH

describe genau welche Algorithms, einzelheiten
challenges
theoretical comparison/practical

tests:
-data
-issus with data/dataset, size/randomness
results on dataset
in 2 weeks:



24.01.21:

- canonical form rework, in first version just renamed each variable, but problem when one variable occured multiple times, so createt conversion dict to store which old names matches the new one.
- isRegularPatternClass key idea very simple, just check for duplicates, but how to implement, collect each one and search whether its already there? for now iterate over all possible variables, since its only the uppercase letters
- implementation of algo 1:
    - replaceAt is used to maintain the old pattern while testing new ones
    - look at descPat, isRegularPatternClass not needed at all
    - problem with matchingRegular, prefix vs middle part vs suffix, what happends when pattern end on a variable and suffix is empty, also rework of findAllNonVariables to separate between suffix,prefix and the results
    - suffix problem for empty suffix

    - algo working, but is it correct?, is descriptive pattern unique or can there be multiple equaliy once
    - how to rate patterns, distance zwischen pattern
    
27.01:
- trimming the finale pattern, for sequence of variables like GGEGJ -> G, should that be in the canonical form?


"""

bis 27.01 regular fertig - done
dann nächste pattern types
dann real data test

BA struktur:
literatur/erklärungen
implementation beschreiben
test cases
analyse + diagramme

# matching algorithm
# shinohara erklären
# den shinohara algorithmus erklären
# testclassen beschreiben
# über meine implementierung 


meeting 27.01:
distance zwischen pattern:
    lcs longest common substring als metric
    split verfahren
    andere verfahren?
    number of letters/ number of variables
        prefix/sufix test trivial oder?

    -> statisticen zu metriken

warten auf biodaten, 
non cross pattern

"""
