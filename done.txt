KMP:
-naive implementation
-regular implementation+nextTable

-testing: single run with timing, multiple runs and comparing results, generating random valid input

-problems: naive implementation and string "aaaa", with pattern "aa" 
    kmp matches, where the algo continues

AhoC:


-problems: string.ascii_uppercase + string.digits as possible chars
    how many states, for now using upper limit and some are empty -> trie
    implementation of goTo function, whole alphabet vs hashing/dict
    checking on input-> multiple times the same word

RabinKarp:
    -only working on 1 and 0



more testing
boyer-moore

kmp standard
rk test without many occurencsy faster

alternativ: union-find implemntation refresh 




TESTS:
-ahoc: printable instead of uppercase+didigts


BM:
-diffrent versions: badChar as single array or 2d array


boyer moore,turbo boyer more,apostolico.giancarlo -> diffrent variants, compare against
https://www.amazon.de/Handbook-Exact-String-Matching-Algorithms/dp/0954300645
https://www.amazon.de/Algorithms-Strings-Maxime-Crochemore/dp/1107670993/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=&sr=

-> focus on booyer more handbook of exact STring Matching
small presentaioon, compare the implemntation, speed on diffrent data